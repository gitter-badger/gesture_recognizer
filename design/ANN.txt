                         ANN TRAINING
/*************************************
neurolab python
creation and training
3 layered
something like a fuzzy output 
error checking by own function
iterative
save the net
******************************************/

Neurolab
	NeuroLab - a library of basic neural networks algorithms with flexible network configurations and learning algorithms for Python. To simplify the using of the library, interface is similar to the package of Neural Network Toolbox (NNT) of MATLAB (c). The library is based on the package numpy (http://numpy.scipy.org), some learning algorithms are used scipy.optimize (http://scipy.org).

Eg:
	# -*- coding: utf-8 -*-
""" 
Example of use multi-layer perceptron
=====================================

Task: Approximation function: 1/2 * sin(x)

"""

import neurolab as nl
import numpy as np
from pickle import dump
# Create train samples
x = np.linspace(-7, 7, 20)
y = np.sin(x) * 0.5

size = len(x)

inp = x.reshape(size,1)
tar = y.reshape(size,1)

# Create network with 2 layers and random initialized
net = nl.net.newff([[-7, 7]],[5, 1])

# Train network
error = net.train(inp, tar, epochs=500, show=100, goal=0.02)
dump(net,open("net.net","w"))
# Simulate network
out = net.sim(inp)

# Plot result
import pylab as pl
from pickle import load
pl.subplot(211)
pl.plot(error)
pl.xlabel('Epoch number')
pl.ylabel('error (default SSE)')

x2 = np.linspace(-6.0,6.0,150)
net=load("net.net")
y2 = net.sim(x2.reshape(x2.size,1)).reshape(x2.size)

y3 = out.reshape(size)

pl.subplot(212)
pl.plot(x2, y2, '-',x , y, '.', x, y3, 'p')
pl.legend(['train target', 'net output'])
pl.show()


Explanation:
     The neurolab library contains the necessary tools and functions to perform artificial neural network functionalities.Its supported by 'numpy' a python library for numerical operation and matrix arithmatics which is written in c and so have very high performance compared to usual python tools.
Here a network is first created and then is trained with random weights then the net is stored  with pickle.
	Here in our program the network doesn't give good or required error on one set of epoches with random weights so the train() function is also called in another loop so that after every set of epoches the error is checked and the error checking for iteration is modified and considerd the output something like a  fuzzy output and out of 4 variables representing 4 gestures in the output of last epoche istaken and largest one is assigned value 1 and all else 0 then its checked with the required target output and error is calculated then this error is considered to determine or decide on another iteration
Once a satisfiable error is the resulting error loop breaks and net is then stored into permanant storage as a file using pickle


Saving the net for simulation
 	                            Pickle
	The pickle module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure. “Pickling” is the process whereby a Python object hierarchy is converted into a byte stream, and “unpickling” is the inverse operation, whereby a byte stream is converted back into an object hierarchy. Pickling (and unpickling) is alternatively known as “serialization”, “marshalling,” [1] or “flattening”, however, to avoid confusion, the terms used here are “pickling” and “unpickling”.


Usage
	To serialize an object hierarchy, you first create a pickler, then you call the pickler’s dump() method. To de-serialize a data stream, you first create an unpickler, then you call the unpickler’s load() method. 


1.pickle.dump(obj, file)
Write a pickled representation of obj to the open file object file. 
file must have a write() method that accepts a single string argument. It can thus be a file object opened for writing, a StringIO object, or any other custom object that meets this interface.

2.pickle.load(file)
Read a string from the open file object file and interpret it as a pickle data stream, reconstructing and returning the original object hierarchy. This is equivalent to Unpickler(file).load().
file must have two methods, a read() method that takes an integer argument, and a readline() method that requires no arguments. Both methods should return a string. Thus file can be a file object opened for reading, a StringIO object, or any other custom object that meets this interface.

This function automatically determines whether the data stream was written in binary mode or not.
